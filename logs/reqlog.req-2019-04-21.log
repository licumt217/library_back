[2019-04-21T11:45:20.467] [INFO] default - 获取资源树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611' }
[2019-04-21T11:45:20.524] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T12:14:36.512] [INFO] default - 获取资源树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611' }
[2019-04-21T12:14:36.586] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T12:18:02.626] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T12:18:29.634] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T12:18:35.933] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T12:19:39.214] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T12:20:04.992] [INFO] default - 新增角色参数： { name: '斤斤计较' }
[2019-04-21T12:20:05.037] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T12:20:30.544] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T12:20:34.682] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T12:20:38.429] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T12:20:49.502] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T12:21:05.665] [INFO] default - 新增角色参数： { name: '斤斤计较' }
[2019-04-21T12:21:05.669] [INFO] default - 角色已存在！
[2019-04-21T12:21:08.061] [INFO] default - 新增角色参数： { name: '斤斤计较2' }
[2019-04-21T12:21:08.092] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T12:21:14.903] [INFO] default - 删除书籍参数： { _id: '5cbbefb4d6c9f25db915a76d' }
[2019-04-21T12:21:14.906] [INFO] default - 书籍不存在！
[2019-04-21T12:21:35.125] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T13:20:26.851] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T13:20:32.930] [INFO] default - 删除角色参数： { _id: '5cbbefb4d6c9f25db915a76d' }
[2019-04-21T13:20:32.944] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T13:20:36.408] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T13:20:47.191] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T13:20:53.298] [INFO] default - 修改角色信息参数： { _id: '5cbbef74d6c9f25db915a76c',
  name: '斤斤计较3',
  updateTime: '2019-04-21T12:20:04.999Z',
  __v: 0,
  _index: 0,
  _rowKey: 2 }
[2019-04-21T13:20:53.340] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T13:20:56.875] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T13:21:38.210] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T13:23:05.269] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T13:26:01.276] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T13:37:49.071] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T13:37:52.493] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T13:38:00.906] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T13:38:02.921] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T13:39:44.563] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T13:39:46.132] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T13:39:48.434] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T13:55:00.062] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T13:55:00.080] [INFO] default - ReferenceError: mainService is not defined
    at userService.getById.then.data (/Users/licumt217/Documents/projects/li/library_back/dao/service/ResourceService.js:91:21)
    at process._tickCallback (internal/process/next_tick.js:68:7)
[2019-04-21T13:55:00.081] [INFO] default - ReferenceError: mainService is not defined
    at userService.getById.then.data (/Users/licumt217/Documents/projects/li/library_back/dao/service/ResourceService.js:91:21)
    at process._tickCallback (internal/process/next_tick.js:68:7)
[2019-04-21T13:55:38.246] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T13:55:38.323] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T13:57:34.345] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T13:57:34.382] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T13:57:49.640] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T13:57:49.675] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T13:58:21.056] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T13:58:21.083] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T13:59:41.242] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T13:59:41.270] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T13:59:43.096] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T13:59:44.397] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T13:59:44.423] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T14:00:02.954] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T14:00:02.977] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T14:01:16.145] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T14:01:16.165] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T14:01:53.855] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T14:01:53.883] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T14:01:57.091] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T14:01:57.134] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T14:02:05.662] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0005' }
[2019-04-21T14:02:22.572] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T14:02:22.600] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:14:11.327] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:14:11.356] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:19:02.929] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:19:02.974] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:19:49.327] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:19:49.373] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:20:16.404] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:20:16.436] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:20:19.988] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  resourceIdArray:
   [ { title: '借阅管理',
       expand: true,
       code: '0005',
       selected: false,
       resourceId: '5cbae98e4e6f9c00f7df3c40',
       nodeKey: 5,
       checked: true,
       indeterminate: false } ] }
[2019-04-21T15:20:19.994] [INFO] default - Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
    at ServerResponse.setHeader (_http_outgoing.js:470:11)
    at ServerResponse.header (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:767:10)
    at ServerResponse.send (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:170:12)
    at ServerResponse.json (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:267:15)
    at ServerResponse.send (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:158:21)
    at mainService.find.then.data (/Users/licumt217/Documents/projects/li/library_back/routes/roles.js:184:17)
    at process._tickCallback (internal/process/next_tick.js:68:7)
[2019-04-21T15:20:46.781] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:20:46.808] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:20:49.124] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0005' }
[2019-04-21T15:20:50.955] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray:
   [ { title: '借阅管理',
       expand: true,
       code: '0005',
       selected: true,
       resourceId: '5cbae98e4e6f9c00f7df3c40',
       nodeKey: 5,
       checked: true,
       indeterminate: false } ] }
[2019-04-21T15:20:50.959] [INFO] default - Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
    at ServerResponse.setHeader (_http_outgoing.js:470:11)
    at ServerResponse.header (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:767:10)
    at ServerResponse.send (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:170:12)
    at ServerResponse.json (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:267:15)
    at ServerResponse.send (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:158:21)
    at mainService.find.then.data (/Users/licumt217/Documents/projects/li/library_back/routes/roles.js:184:17)
    at process._tickCallback (internal/process/next_tick.js:68:7)
[2019-04-21T15:20:55.815] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:20:55.853] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:20:57.788] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray:
   [ { title: '借阅管理',
       expand: true,
       code: '0005',
       selected: false,
       resourceId: '5cbae98e4e6f9c00f7df3c40',
       nodeKey: 5,
       checked: true,
       indeterminate: false } ] }
[2019-04-21T15:20:57.792] [INFO] default - Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
    at ServerResponse.setHeader (_http_outgoing.js:470:11)
    at ServerResponse.header (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:767:10)
    at ServerResponse.send (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:170:12)
    at ServerResponse.json (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:267:15)
    at ServerResponse.send (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:158:21)
    at mainService.find.then.data (/Users/licumt217/Documents/projects/li/library_back/routes/roles.js:184:17)
    at process._tickCallback (internal/process/next_tick.js:68:7)
[2019-04-21T15:21:21.564] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:21:21.601] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:21:21.629] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:21:21.668] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:21:42.299] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray:
   [ { title: '借阅管理',
       expand: true,
       code: '0005',
       selected: false,
       resourceId: '5cbae98e4e6f9c00f7df3c40',
       nodeKey: 5,
       checked: true,
       indeterminate: false } ] }
[2019-04-21T15:21:42.303] [INFO] default - Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
    at ServerResponse.setHeader (_http_outgoing.js:470:11)
    at ServerResponse.header (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:767:10)
    at ServerResponse.send (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:170:12)
    at ServerResponse.json (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:267:15)
    at ServerResponse.send (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:158:21)
    at mainService.find.then.data (/Users/licumt217/Documents/projects/li/library_back/routes/roles.js:184:17)
    at process._tickCallback (internal/process/next_tick.js:68:7)
[2019-04-21T15:21:48.633] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray:
   [ { title: '借阅管理',
       expand: true,
       code: '0005',
       selected: false,
       resourceId: '5cbae98e4e6f9c00f7df3c40',
       nodeKey: 5,
       checked: true,
       indeterminate: false } ] }
[2019-04-21T15:21:48.638] [INFO] default - Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
    at ServerResponse.setHeader (_http_outgoing.js:470:11)
    at ServerResponse.header (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:767:10)
    at ServerResponse.send (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:170:12)
    at ServerResponse.json (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:267:15)
    at ServerResponse.send (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:158:21)
    at mainService.find.then.data (/Users/licumt217/Documents/projects/li/library_back/routes/roles.js:184:17)
    at process._tickCallback (internal/process/next_tick.js:68:7)
[2019-04-21T15:22:02.890] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray:
   [ { title: '借阅管理',
       expand: true,
       code: '0005',
       selected: false,
       resourceId: '5cbae98e4e6f9c00f7df3c40',
       nodeKey: 5,
       checked: true,
       indeterminate: false } ] }
[2019-04-21T15:22:02.894] [INFO] default - Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
    at ServerResponse.setHeader (_http_outgoing.js:470:11)
    at ServerResponse.header (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:767:10)
    at ServerResponse.send (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:170:12)
    at ServerResponse.json (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:267:15)
    at ServerResponse.send (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:158:21)
    at mainService.find.then.data (/Users/licumt217/Documents/projects/li/library_back/routes/roles.js:184:17)
    at process._tickCallback (internal/process/next_tick.js:68:7)
[2019-04-21T15:22:09.938] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray:
   [ { title: '借阅管理',
       expand: true,
       code: '0005',
       selected: false,
       resourceId: '5cbae98e4e6f9c00f7df3c40',
       nodeKey: 5,
       checked: true,
       indeterminate: false } ] }
[2019-04-21T15:22:09.942] [INFO] default - Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
    at ServerResponse.setHeader (_http_outgoing.js:470:11)
    at ServerResponse.header (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:767:10)
    at ServerResponse.send (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:170:12)
    at ServerResponse.json (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:267:15)
    at ServerResponse.send (/Users/licumt217/Documents/projects/li/library_back/node_modules/express/lib/response.js:158:21)
    at mainService.find.then.data (/Users/licumt217/Documents/projects/li/library_back/routes/roles.js:184:17)
    at process._tickCallback (internal/process/next_tick.js:68:7)
[2019-04-21T15:25:18.086] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:25:18.175] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:25:19.995] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray:
   [ { title: '借阅管理',
       expand: true,
       code: '0005',
       selected: false,
       resourceId: '5cbae98e4e6f9c00f7df3c40',
       nodeKey: 5,
       checked: true,
       indeterminate: false } ] }
[2019-04-21T15:26:18.560] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray:
   [ { title: '借阅管理',
       expand: true,
       code: '0005',
       selected: false,
       resourceId: '5cbae98e4e6f9c00f7df3c40',
       nodeKey: 5,
       checked: true,
       indeterminate: false } ] }
[2019-04-21T15:27:43.877] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray:
   [ { title: '借阅管理',
       expand: true,
       code: '0005',
       selected: false,
       resourceId: '5cbae98e4e6f9c00f7df3c40',
       nodeKey: 5,
       checked: true,
       indeterminate: false } ] }
[2019-04-21T15:28:41.403] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray:
   [ { title: '借阅管理',
       expand: true,
       code: '0005',
       selected: false,
       resourceId: '5cbae98e4e6f9c00f7df3c40',
       nodeKey: 5,
       checked: true,
       indeterminate: false } ] }
[2019-04-21T15:29:40.895] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:29:40.932] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:29:45.672] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0005' }
[2019-04-21T15:29:47.041] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray: [ '5cbae98e4e6f9c00f7df3c40' ] }
[2019-04-21T15:29:50.453] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray: [ '5cbae98e4e6f9c00f7df3c40' ] }
[2019-04-21T15:31:42.481] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray: [ '5cbae98e4e6f9c00f7df3c40' ] }
[2019-04-21T15:34:37.997] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray: [ '5cbae98e4e6f9c00f7df3c40' ] }
[2019-04-21T15:35:10.177] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray: [ '5cbae98e4e6f9c00f7df3c40' ] }
[2019-04-21T15:36:19.806] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray: [ '5cbae98e4e6f9c00f7df3c40' ] }
[2019-04-21T15:36:19.828] [INFO] default - 新增角色资源关系异常！ { ValidationError: Role validation failed: name: Path `name` is required.
    at ValidationError.inspect (/Users/licumt217/Documents/projects/li/library_back/node_modules/mongoose/lib/error/validation.js:59:24)
    at formatValue (internal/util/inspect.js:490:31)
    at inspect (internal/util/inspect.js:191:10)
    at formatWithOptions (util.js:164:18)
    at Object.format (util.js:72:10)
    at basicLayout (/Users/licumt217/Documents/projects/li/library_back/node_modules/log4js/lib/layouts.js:65:57)
    at app (/Users/licumt217/Documents/projects/li/library_back/node_modules/log4js/lib/appenders/dateFile.js:30:19)
    at categoryAppenders.forEach (/Users/licumt217/Documents/projects/li/library_back/node_modules/log4js/lib/log4js.js:42:5)
    at Array.forEach (<anonymous>)
    at sendLogEventToAppender (/Users/licumt217/Documents/projects/li/library_back/node_modules/log4js/lib/log4js.js:41:21)
    at listeners.forEach.l (/Users/licumt217/Documents/projects/li/library_back/node_modules/log4js/lib/clustering.js:16:26)
    at Array.forEach (<anonymous>)
    at sendToListeners (/Users/licumt217/Documents/projects/li/library_back/node_modules/log4js/lib/clustering.js:16:13)
    at Object.send (/Users/licumt217/Documents/projects/li/library_back/node_modules/log4js/lib/clustering.js:78:7)
    at Logger._log (/Users/licumt217/Documents/projects/li/library_back/node_modules/log4js/lib/logger.js:56:16)
    at Logger.log (/Users/licumt217/Documents/projects/li/library_back/node_modules/log4js/lib/logger.js:45:12)
  errors:
   { name:
      { ValidatorError: Path `name` is required.
          at new ValidatorError (/Users/licumt217/Documents/projects/li/library_back/node_modules/mongoose/lib/error/validator.js:29:11)
          at validate (/Users/licumt217/Documents/projects/li/library_back/node_modules/mongoose/lib/schematype.js:945:13)
          at /Users/licumt217/Documents/projects/li/library_back/node_modules/mongoose/lib/schematype.js:998:11
          at Array.forEach (<anonymous>)
          at SchemaString.SchemaType.doValidate (/Users/licumt217/Documents/projects/li/library_back/node_modules/mongoose/lib/schematype.js:954:19)
          at /Users/licumt217/Documents/projects/li/library_back/node_modules/mongoose/lib/document.js:2106:9
          at process._tickCallback (internal/process/next_tick.js:61:11)
        message: 'Path `name` is required.',
        name: 'ValidatorError',
        properties: [Object],
        kind: 'required',
        path: 'name',
        value: undefined,
        reason: undefined,
        [Symbol(mongoose:validatorError)]: true } },
  _message: 'Role validation failed',
  name: 'ValidationError' }
[2019-04-21T15:37:41.647] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:37:41.731] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:37:44.209] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray: [ '5cbae98e4e6f9c00f7df3c40' ] }
[2019-04-21T15:37:44.363] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T15:37:49.709] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:37:49.739] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:38:25.957] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:38:25.990] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:47:29.817] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:47:29.848] [INFO] default - ReferenceError: data is not defined
    at mainService.listByLevel.then.allResourceArray (/Users/licumt217/Documents/projects/li/library_back/routes/resources.js:247:35)
    at process._tickCallback (internal/process/next_tick.js:68:7)
[2019-04-21T15:48:43.453] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:48:43.495] [INFO] default - ReferenceError: data is not defined
    at mainService.listByLevel.then.allResourceArray (/Users/licumt217/Documents/projects/li/library_back/routes/resources.js:247:35)
    at process._tickCallback (internal/process/next_tick.js:68:7)
[2019-04-21T15:49:20.362] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:49:20.396] [INFO] default - ReferenceError: data is not defined
    at mainService.listByLevel.then.allResourceArray (/Users/licumt217/Documents/projects/li/library_back/routes/resources.js:247:35)
    at process._tickCallback (internal/process/next_tick.js:68:7)
[2019-04-21T15:49:49.832] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:49:49.917] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:50:03.956] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:50:04.026] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:50:20.904] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:50:20.986] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:51:54.516] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:51:54.602] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:52:32.930] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:52:33.007] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:57:27.654] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:57:27.727] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:57:34.008] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:57:34.080] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:57:42.054] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:57:42.130] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T15:58:46.442] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T15:58:46.539] [INFO] default - 获取资源getChildrenAndSelf列表的参数： { code: '0' }
[2019-04-21T16:00:48.874] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T16:00:51.444] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T16:00:59.794] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray: [ '5cbae8124e6f9c00f7df3c3c', '5cbae98e4e6f9c00f7df3c40' ] }
[2019-04-21T16:00:59.869] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T16:01:01.675] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T16:01:07.726] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray:
   [ '5cbae97f4e6f9c00f7df3c3f',
     '5cbae8124e6f9c00f7df3c3c',
     '5cbae98e4e6f9c00f7df3c40' ] }
[2019-04-21T16:01:07.765] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T16:01:09.062] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T16:03:19.729] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T16:03:22.980] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T16:03:25.248] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray:
   [ '',
     '5cbac48a9c105d84ef5cfe7c',
     '5cbae8064e6f9c00f7df3c3b',
     '5cbae97f4e6f9c00f7df3c3f',
     '5cbae8124e6f9c00f7df3c3c',
     '5cbae98e4e6f9c00f7df3c40' ] }
[2019-04-21T16:03:25.325] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T16:03:26.364] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T16:03:30.205] [INFO] default - 获取角色授权的参数： { opUserId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c',
  resourceIdArray: [ '5cbae8064e6f9c00f7df3c3b', '5cbae8124e6f9c00f7df3c3c' ] }
[2019-04-21T16:03:30.250] [INFO] default - 获取角色列表的参数： {}
[2019-04-21T16:03:31.549] [INFO] default - 获取资源角色授权树形列表的参数： { userId: '5cadc7a6fc0e55294c70d611',
  roleId: '5cbbef74d6c9f25db915a76c' }
[2019-04-21T16:03:36.419] [INFO] default - 获取角色列表的参数： {}
